<< Py tips >>
last updated : 2022.03.22. pm.11.20
Source : https://docs.python.org/3/library/warnings.html
==============================================================
==============================================================
[[[  경고제어 (Warning Control)  ]]]
==============================================================
==============================================================

- 일반적으로 경고 메시지는 프로그램내에서 어떤 조건을 사용자에게 알려주는 것이 유용한 상황에서 제공되며, 이때 일반적으로 이러한 조건이 프로그램을 종료시키거나 예외를 두는 것을 정당화 하지는 않는다. 예를들어, 사용자가 프로그램이 쓸모없는 모듈을 사용하려할때 경고를 주기를 원할지도 모른다는 식이다. 

- 파이썬 프로그래머들은 이 모듈에서 정의된 warn()함수을 호출함으로써 경고를 주게된다. 

- 경고 메시지는 일반적으로 sys.stderr에 작성되지만, 모든 경고들을 예외로 넘겨버림으로써 모두 무시하여, 이들의 위치는 유연하게 변동될수 있다. 경고의 위치는 경고의 분류, 경고메시지의 내용 및 이러한 경고가 발행된 원래의 장소에 기반을 두어 다양하게 나타날수 있다. 동일한 원인 장소에 대한 특정 경고의 반복은 일반적으로 제어된다. 

- 경고제어에는 두가지 단계가 있다. 첫번째는, 경고가 주어질때 마다, 메시지가 주어야 할지 말아야할지에 대한 결정이 내려지는 것이며, 두번째는, 만약 메시지가 주어지는 경우에는, 사용자가 설정할수 있는 hook를 이용하여 포맷을 지정하고 출력되어야한다.

- 경고 메시지를 줄것인지의 여부에 대한 결정은 warning filter에 의해 제어되며 이는 규칙과 행동을 일치시키는 것의 연속체이다. 규칙은 filterwarnings()를 호출함으로써 필터에 추가될수 있으며 resetwarnings()를 호출함으로서 기본값의 상태로 초기화 될수 있다. 

- 경고 메시지를 출력하는 것은 shownwarning()을 호출함으로써 완료될수 있으며, 이는 무시(overridden)될수 있다. 이러한 함수의 기본 적용은 formatwarning()을 호출함으로써 메시지의 형식을 지정할수 있으며 이는 또한 사용자의 적용에 의한 사용이 가능하게 한다. 

*** logging. captureWarnings()는 여러분이 표준화된 등록 제반시설(standard logging infrastructure)을 가지고 있는 모든 경고들을 다룰수 있도록 해준다. 


==============================================================
## 경고 분류 (Warning Categories)
==============================================================

- 경고분류를 나타내는 내장형 예외의 여러경우가 있다. 이러한 분류는 경고의 그룹들을 걸러낼수(filter out) 있도록 하는데 유용하다. 

- 이러한 기술적으로 내장된 예외들은 여기에 작성되어 있다. 그 이유는 개념적으로 이들이 경고 메커니즘에 포함되기 때문이다. 

- 사용자 코드는 표준화된 경고 분류중 한가지를 하위분류함으로써 추가적인 경고 분류를 지정할수있다. 경고 분류는 항상 경고 분류의 하위분류가 될수 밖에 없을 것이다. 

- 다음의 경고 분류는 최근 정의되었다. 
---------------------------------------------
> Warning : 모든 경고 분류항목들의 기본적 분류이다. 이는 Exception의 하위분류이다. 
> UserWarning : warn()의 기본 분류.
> DeprecationWarning : 사라질 요소들에 대한 경고를 위한 기본분류로 파이썬 개발자들을 위해고안됨
> SyntaxWarning : 불확실한 구문상의 특징에 대한 경고를 위한 기본분류 
> RuntimeWarning : 불확실한 실행시간 에러특징에 대한 경고를 위한 기본분류
> FutureWarning : 사라질 요소들에 대한 경고를 위한 기본분류로 이는 파이썬으로 쓰여진 프로그램의 최종 사용자들을 위한것임 
> PendingDeprecationWarning : 향후 사라지게될 요소들에 대한 경고의 기본분류 
> ImportWarning : 모듈을 가져오는 과정에서 유발되는 경고의 기본분류 
> UnicodeWarning : Unicode와 관련한 경고의 기본분류 
> BytesWarning : bytes와 bytearray와 관련한 경고의 기본분류 
> ResourceWarning 자원의 이용과 관련한 경고의 기본분류 
--------------------------------------------- 


==============================================================
## 경고 필터 (Warning Filter)
==============================================================
- 경고 필터는 경고를 무시할지, 나타낼지, 아니면 예외로 하여 에러로 넘길것인지를 제어해준다. 

- 개념적으로는, 경고 필터는 필터 상세화의 정렬된 리스트를 유지시켜준다. 그 어떤 특정 경고도 동일한 것이 발견될 때까지 교대로 목록에 있는 각각의 필터 사양(specification)에 일치시키며, 각 필터는 각 일치된 항목의 배치를 결정해준다. 각각의 도입은 (action, message, category, module, lineno)의 튜플의 형태이다. 

- 행동(action)은 다음중 하나이다. 
---------------------------------------------
> "default" : 경고가 주어진 각 위치(module+line no)에 대해 일치하는 경고의 첫번째 발생을 출력해준다. 
> "error" : 일치하는 경고들(matching warnings)을 예외로 전환해 준다.  
> "ignore" : 일치하는 경고들을 결코 출력해 주지 않는다. 
> "always" : 일치하는 경고들을 항상 출력해준다. 
> "module" : 경고가 주어진 곳의 각 모듈에 대해 line no와 상관없이 일치하는 경고들의 첫번째 발생을 출력해준다. 
> "once" : 위치와 상관없이 일치하는 경고들의 첫번째 발생만 출력해 준다. 
---------------------------------------------
- message는 경고 메시지의 시작이 일치해야만 하는 일반적인 표현식을 포함하는 문자열이다. 
- category는 경고분류중 하나로 이는 일치시키기 위한 부분분류일 것이다.  
- module은 모듈이름이 일치되어야만 하는 일반 표현식을 포함하는 문자열이다. 이 표현식은 사례별로 민감하게 편집된다. 
- lineno는 경고가 발생된 곳의 라인 넘버가 일치해야하는 정수값이나 모든 라인넘버와 일치할때는 0이다.  

- 경고 분류가 내장형 예외 분류로부터 유도되었기 때문에, 경고를 에러로 전환한기 위해 우리는 단지 category(message)를 호출한다. 

- 만약, 경고가 주어졌지만, 그어떤 등록된 필터와 일치하지 않는 경우에는 기본 행동(default action)이 적용된다. 



==============================================================
## 이용가능한 함수들 (Available Functions) 
==============================================================
> warnings.warn(message, category=None, stacklevel=1, source=None)

> warnings.warn_explicit(message, category, filename, lineno, module=None, registry=None, module_globals=None, source=None)

> warnings.showwarning(message, category, filename, lineno, file=None, line=None)
 
> warnings.formatwarning(message, category, filename, lineno, line=None)

> warnings.filterwarnings(action, message='', category=Warning, module='', lineno=0, append=False)

> warnings.simplefilter(action, category=Warning, lineno=0, append=False)

> warnings.resetwarnings()



==============================================================
## 이용가능한 배경 관리자 (Available Context Managers) 
==============================================================
> class warnings.catch_warnings(*, record=False, module=None)
 
- context manager는 경고들의 필터나 Shownwarning() 함수를 복제하거나 나가게 되었을때는 저장해준다. 만약 record 항이 거짓(기본값)이면 배경 관리자(context manager)는 입력에 None을 반환해준다. 만약 record항이 참이면, 리스트는 점차적으로 custom shownwarning() 함수에 의해 나타난 것과 같은 객체와 함께 증가되는 값을 반환해 준다. 이는 또한 sys.stdout으로 결과값을 제한해준다. 목록의 각각의 객체는 shownwarning()에 나타난 항들과 같은 동일한 이름을 지닌 속성들을 가지고 있다. 

> module 항은 여러분이 warnings의 보호될 필터를 들여올때 반환된 모듈대신 사용될 모듈을 취한다. 이 항은 기본적으로 warnings 모듈 자체를 시험하기 위해 존재한다. 

*** 주의 : catch_warnings 관리자는 모듈의 showwarning() 함수나 필터 상세의 내부리스트를 교체하고 차후에 저장함으로써 작동하게 된다. 이것은 배경 매니저가 전반적인 상태를 수정하며 그 결과 다중의 쓰레드를 안전하게 접근(thread-safe)하지 않다는 것을 의미한다.  






